#include <iostream>
#include <cassert>
using namespace std;
template <typename T>
class SimpleQueue
{
    T* _arr;
    int _front;
    int _rear;
    int _max;

public:
    SimpleQueue(int max)
    {
        if (max <= 0 || max >= 1001)
            assert(!"Minimum 1, maksimum 1000 olabiler");

        _max = max;
        _front = -1;
        _rear = -1;
        _arr = new T[_max];
    }

    bool IsFull()
    {
        return _rear == _max - 1;
    }

    bool IsEmpty()
    {
        return _front == -1;
    }

    void EnQueue(T item)
    {
        if (IsFull())
            assert(!"Queue is Full");

        if (_front == -1)
            _front = 0;

        _rear++;
        _arr[_rear] = item;
    }

    void DeQueue()
    {
        if (IsEmpty())
            assert(!"Queue is Empty");

        if (_front == _rear)
        {
            _front = -1;
            _rear = -1;
            return;
        }
        _front++;
    }

    T Peek()
    {
        if (IsEmpty())
            assert(!"Queue is Empty");

        return _arr[_front];
    }

    int Size()
    {
        if (IsEmpty())
            return 0;

        return _rear - _front + 1;
    }

    void Print()
    {
        if (IsEmpty())
        {
            cout << "[]" << endl;
            return;
        }

        cout << "[";
        for (int i = _front; i <= _rear; i++)
        {
            cout << _arr[i];
            if (i != _rear)
                cout << ", ";
        }
        cout << "]" << endl;
    }
};

int main()
{
    SimpleQueue<int> intQueue(5);

    intQueue.Print();

    intQueue.EnQueue(1);
    intQueue.EnQueue(2);
   

    intQueue.Print();

    intQueue.DeQueue();
    intQueue.DeQueue();
    intQueue.DeQueue();

    intQueue.Print();

    
}
